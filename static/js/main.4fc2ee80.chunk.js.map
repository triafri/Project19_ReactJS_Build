{"version":3,"sources":["component/ModalPage.js","component/Body.js","App.js","serviceWorker.js","index.js"],"names":["ModalPage","props","Modal","size","centered","show","modalShow","onHide","setModalShow","Header","Title","Body","Form","Control","value","dataState","inNama","onChange","e","handleInput","type","placeholder","inJabatan","style","marginTop","inKelamin","inTanggal","Footer","Button","onClick","closeModal","variant","handleSave","state","dataKaryawan","dataSearch","inputId","handleEdit","bind","clearInput","handleDel","search","tampilData","id","fetch","then","response","json","hasil","setState","nama_karyawan","jabatan","jenis_kelamin","tanggal_lahir","this","alert","method","body","JSON","stringify","headers","result","console","log","target","Navbar","bg","Brand","color","inline","FormControl","marginLeft","width","className","Container","Row","Table","striped","bordered","hover","textAlign","fontWeight","fontSize","reverse","filter","valueFilter","toLowerCase","includes","map","index","key","margin","Component","App","React","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4fc2ee80.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Modal, Button, Form } from 'react-bootstrap';\r\n\r\nfunction ModalPage(props){\r\n    return(\r\n        <Modal size='lg' centered show={props.modalShow} onHide={()=>props.setModalShow(true)}>\r\n            <Modal.Header>\r\n                <Modal.Title>Detail Data Karyawan</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form.Control value={props.dataState.inNama} onChange={(e)=>props.handleInput('inNama',e)} type='text' placeholder='Masukkan Nama Karyawan'/>\r\n                <Form.Control value={props.dataState.inJabatan} onChange={(e)=>props.handleInput('inJabatan' ,e)} style={{marginTop:'10px'}} type='text' placeholder='Masukkan Jabatan'/>\r\n                <Form.Control value={props.dataState.inKelamin} onChange={(e)=>props.handleInput('inKelamin' ,e)}style={{marginTop:'10px'}} type='text' placeholder='Masukkan Jenis Kelamin'/>\r\n                <Form.Control value={props.dataState.inTanggal} onChange={(e)=>props.handleInput('inTanggal',e)}style={{marginTop:'10px'}} type='date' placeholder='Tanggal Lahir'/>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button onClick={()=>props.closeModal()} variant='secondary'>Close</Button>\r\n                <Button onClick={()=>props.handleSave()} variant='success'>Simpan</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n\r\n    )\r\n}\r\n\r\nexport default ModalPage","import React, {Component} from 'react';\r\nimport ModalPage from './ModalPage';\r\nimport { Container, Row, Button, Form, Table, Navbar, FormControl} from 'react-bootstrap';\r\n\r\nclass Body extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            dataKaryawan:[],\r\n            dataSearch:'',\r\n            inNama:'',\r\n            inJabatan:'',\r\n            inKelamin:'',\r\n            inTanggal:'',\r\n            inputId:''\r\n        }\r\n        this.handleEdit=this.handleEdit.bind(this)\r\n        this.handleSave=this.handleSave.bind(this)\r\n        this.handleInput=this.handleInput.bind(this)\r\n        this.closeModal=this.closeModal.bind(this)\r\n        this.clearInput=this.clearInput.bind(this)\r\n        this.handleDel=this.handleDel.bind(this)\r\n        this.search=this.search.bind(this)\r\n        this.tampilData=this.tampilData.bind(this)\r\n    }\r\n\r\n    handleEdit(id){\r\n        fetch(`http://localhost:3000/data-karyawan/${id}`)\r\n            .then((response)=>response.json())\r\n            .then((hasil)=>{\r\n                this.props.setModalShow(true)\r\n                this.setState(\r\n                    {\r\n                        inNama:hasil.nama_karyawan,\r\n                        inJabatan:hasil.jabatan,\r\n                        inKelamin:hasil.jenis_kelamin,\r\n                        inTanggal:hasil.tanggal_lahir,\r\n                        inputId:hasil.id\r\n                    }\r\n                )\r\n            })\r\n    }\r\n\r\n    handleSave(){\r\n        if(this.state.inNama === '' || this.state.inJabatan === '' || this.state.inKelamin === '' || this.state.inTanggal === ''){\r\n            alert('Silahkan Isi Data')\r\n        } else if(this.state.inputId === ''){\r\n            fetch('http://localhost:3000/data-karyawan',{\r\n                method:'POST',\r\n                body:JSON.stringify({\r\n                    nama_karyawan:this.state.inNama,\r\n                    jabatan:this.state.inJabatan,\r\n                    jenis_kelamin:this.state.inKelamin,\r\n                    tanggal_lahir:this.state.inTanggal\r\n                }),\r\n                headers:{\r\n                    'Content-type': 'application/json; charset=UTF-8',\r\n                }\r\n            })\r\n            .then ((response)=>response.json())\r\n            .then ((result)=>{\r\n                console.log(result)\r\n                this.closeModal()\r\n                this.tampilData()\r\n            })\r\n        } else{\r\n            fetch(`http://localhost:3000/data-karyawan/${this.state.inputId}`,{\r\n                method:'PUT',\r\n                body:JSON.stringify({\r\n                    nama_karyawan:this.state.inNama,\r\n                    jabatan:this.state.inJabatan,\r\n                    jenis_kelamin:this.state.inKelamin,\r\n                    tanggal_lahir:this.state.inTanggal\r\n                }),\r\n                headers:{\r\n                    'Content-type': 'application/json; charset=UTF-8',\r\n                }\r\n            })\r\n            .then ((response)=>response.json())\r\n            .then ((hasil)=>{\r\n                this.tampilData()\r\n                this.props.setModalShow(false)\r\n                this.clearInput()\r\n            })\r\n\r\n        }\r\n    }\r\n\r\n    handleInput(value, e){\r\n        this.setState({[value]: e.target.value})\r\n    }\r\n\r\n    closeModal(){\r\n        this.props.setModalShow(false)\r\n        this.clearInput()\r\n    }\r\n\r\n    clearInput(){\r\n        this.setState(\r\n            {\r\n            inNama:'',\r\n            inJabatan:'',\r\n            inKelamin:'',\r\n            inTanggal:'',\r\n            inputId:'' \r\n            }\r\n        )\r\n    }\r\n\r\n    handleDel(id){\r\n        fetch(`http://localhost:3000/data-karyawan/${id}`,{\r\n            method:'DELETE',\r\n        })\r\n        .then((response)=>{\r\n            alert('Data Terhapus')\r\n            this.tampilData()\r\n        })\r\n    }\r\n\r\n    search(e){\r\n        this.setState({dataSearch: e.target.value})\r\n    }\r\n\r\n    tampilData(){\r\n        fetch('http://localhost:3000/data-karyawan')\r\n            .then((response)=>response.json())\r\n            .then((hasil)=>this.setState({dataKaryawan:hasil}))\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.tampilData()\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Navbar bg=\"dark\">\r\n                    <Navbar.Brand style={{color:'white'}}>DATA KARYAWAN</Navbar.Brand>\r\n                    <Form inline>\r\n                        <FormControl style={{marginLeft:'500px', width:'500px'}} type=\"text\" placeholder=\"Cari Data Karyawan\" className=\"mr-sm-2\" value={this.state.dataSearch} onChange={(e)=>this.search(e)} />\r\n                        <Button onClick={()=>this.props.setModalShow(true)} variant=\"primary\">Tambah Data</Button>\r\n                    </Form>\r\n                </Navbar>\r\n                <Container>\r\n                    <ModalPage modalShow={this.props.modalShow} setModalShow={this.props.setModalShow} closeModal={this.closeModal} handleInput={this.handleInput} dataState={this.state} handleSave={this.handleSave} handleEdit={this.handleEdit}/>\r\n                    <Row>\r\n                                    <Table striped bordered hover style={{marginTop:'40px', textAlign:'center'}} >\r\n                                        <thead style={{fontWeight:'bolder', fontSize:'16px'}}>\r\n                                            <tr>\r\n                                                <td>NO</td>\r\n                                                <td>ID</td>\r\n                                                <td>NAMA</td>\r\n                                                <td>JABATAN</td>\r\n                                                <td>JENIS KELAMIN</td>\r\n                                                <td>TANGGAL LAHIR</td>\r\n                                                <td></td>                               \r\n                                            </tr>\r\n                                        </thead>\r\n                                       <tbody >\r\n                                            {\r\n                                                this.state.dataKaryawan.reverse().filter(valueFilter=>valueFilter.nama_karyawan.toLowerCase().includes(this.state.dataSearch)).map((value, index)=>{\r\n                                                    return(\r\n                                                        <tr key={index}>\r\n                                                            <td>{index+1}</td>\r\n                                                            <td>{value.id}</td>\r\n                                                            <td>{value.nama_karyawan}</td>\r\n                                                            <td>{value.jabatan}</td>\r\n                                                            <td>{value.jenis_kelamin}</td>\r\n                                                            <td>{value.tanggal_lahir}</td>\r\n                                                            <td><Button onClick={()=> this.handleDel(value.id)}  variant='outline-danger' size='sm' style={{margin:'5%'}}>Delete</Button>\r\n                                                            <Button onClick={()=>this.handleEdit(value.id)} variant='outline-primary' size='sm'>Edit</Button></td>\r\n                                                        </tr>\r\n                                                    )\r\n                                                })\r\n                                            }           \r\n                                        </tbody>\r\n                        </Table>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Body","import React from 'react';\nimport './css/bootstrap.min.css';\nimport Body from './component/Body';\n\nfunction App() {\n  const [modalShow, setModalShow] = React.useState(false)\n  return (\n    <div>\n      <Body modalShow={modalShow} setModalShow={setModalShow}/>/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}